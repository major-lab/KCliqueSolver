package kcliquesolver.core.optimization;


import kcliquesolver.core.models.Problem;
import kcliquesolver.core.models.Solution;
import rna2d.core.util.ProgressBar;
import kcliquesolver.core.interfaces.AbstractStrategy;
import rnaclique.core.util.RngStream;


import java.util.ArrayList;


public class MonteCarloStrategy extends AbstractStrategy {
    private final long[] seeds;
    private boolean verbose;
    private int sampleSize;


    public MonteCarloStrategy(int sampleSize, long[] seeds, boolean verbose) {
        // some assertions
        assert sampleSize > 0;

        this.seeds = seeds;
        this.verbose = verbose;
        this.sampleSize = sampleSize;
    }


    public static Solution generateSolutionMonteCarlo(Problem problem, RngStream stream) {
            ArrayList<Integer> genes = selectRandomAssignments(problem.getRanges(), stream);
            Solution solution = new Solution(genes, 0);
            solution.setScore(calculateSumOfPairs(solution, problem.getDistanceMatrix()));

        return solution;
    }


    /**
     * Generate solutions by Monte Carlo
     * Mostly used for debugging and get the distribution of solutions
     * @param problem instance of a consensus problem
     * @return sorted list of solutions, generated by Monte Carlo
     */
    public ArrayList<Solution> solve(Problem problem) {

        // initialize the stream
        RngStream stream = new RngStream();
        stream.setSeed(seeds);

        ProgressBar progressBar = new ProgressBar("Monte Carlo", 40);
        ArrayList<Solution> solutions = new ArrayList<>();
        double counter = 0.;
        for (int i = 0; i != sampleSize; ++i)
        {
            solutions.add(generateSolutionMonteCarlo(problem, stream));
            if (verbose)
            {
                progressBar.update(counter / sampleSize);
                counter += 1;
            }
        }
        if (verbose){
            progressBar.clean();
        }
        return solutions;
    }

    @Override
    public boolean isVerbose() {
        return verbose;
    }


}
